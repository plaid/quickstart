/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.31.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// EarningsTotal An object representing both the current pay period and year to date amount for an earning category.
type EarningsTotal struct {
	// Commonly used term to describe the line item.
	CanonicalDescription NullableString `json:"canonical_description,omitempty"`
	// Text of the line item as printed on the paystub.
	Description NullableString `json:"description,omitempty"`
	CurrentPay *Pay `json:"current_pay,omitempty"`
	YtdPay *Pay `json:"ytd_pay,omitempty"`
	CurrentHours NullableString `json:"current_hours,omitempty"`
	CurrentRate NullableString `json:"current_rate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EarningsTotal EarningsTotal

// NewEarningsTotal instantiates a new EarningsTotal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEarningsTotal() *EarningsTotal {
	this := EarningsTotal{}
	return &this
}

// NewEarningsTotalWithDefaults instantiates a new EarningsTotal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEarningsTotalWithDefaults() *EarningsTotal {
	this := EarningsTotal{}
	return &this
}

// GetCanonicalDescription returns the CanonicalDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EarningsTotal) GetCanonicalDescription() string {
	if o == nil || o.CanonicalDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.CanonicalDescription.Get()
}

// GetCanonicalDescriptionOk returns a tuple with the CanonicalDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EarningsTotal) GetCanonicalDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CanonicalDescription.Get(), o.CanonicalDescription.IsSet()
}

// HasCanonicalDescription returns a boolean if a field has been set.
func (o *EarningsTotal) HasCanonicalDescription() bool {
	if o != nil && o.CanonicalDescription.IsSet() {
		return true
	}

	return false
}

// SetCanonicalDescription gets a reference to the given NullableString and assigns it to the CanonicalDescription field.
func (o *EarningsTotal) SetCanonicalDescription(v string) {
	o.CanonicalDescription.Set(&v)
}
// SetCanonicalDescriptionNil sets the value for CanonicalDescription to be an explicit nil
func (o *EarningsTotal) SetCanonicalDescriptionNil() {
	o.CanonicalDescription.Set(nil)
}

// UnsetCanonicalDescription ensures that no value is present for CanonicalDescription, not even an explicit nil
func (o *EarningsTotal) UnsetCanonicalDescription() {
	o.CanonicalDescription.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EarningsTotal) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EarningsTotal) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *EarningsTotal) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *EarningsTotal) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *EarningsTotal) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *EarningsTotal) UnsetDescription() {
	o.Description.Unset()
}

// GetCurrentPay returns the CurrentPay field value if set, zero value otherwise.
func (o *EarningsTotal) GetCurrentPay() Pay {
	if o == nil || o.CurrentPay == nil {
		var ret Pay
		return ret
	}
	return *o.CurrentPay
}

// GetCurrentPayOk returns a tuple with the CurrentPay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningsTotal) GetCurrentPayOk() (*Pay, bool) {
	if o == nil || o.CurrentPay == nil {
		return nil, false
	}
	return o.CurrentPay, true
}

// HasCurrentPay returns a boolean if a field has been set.
func (o *EarningsTotal) HasCurrentPay() bool {
	if o != nil && o.CurrentPay != nil {
		return true
	}

	return false
}

// SetCurrentPay gets a reference to the given Pay and assigns it to the CurrentPay field.
func (o *EarningsTotal) SetCurrentPay(v Pay) {
	o.CurrentPay = &v
}

// GetYtdPay returns the YtdPay field value if set, zero value otherwise.
func (o *EarningsTotal) GetYtdPay() Pay {
	if o == nil || o.YtdPay == nil {
		var ret Pay
		return ret
	}
	return *o.YtdPay
}

// GetYtdPayOk returns a tuple with the YtdPay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningsTotal) GetYtdPayOk() (*Pay, bool) {
	if o == nil || o.YtdPay == nil {
		return nil, false
	}
	return o.YtdPay, true
}

// HasYtdPay returns a boolean if a field has been set.
func (o *EarningsTotal) HasYtdPay() bool {
	if o != nil && o.YtdPay != nil {
		return true
	}

	return false
}

// SetYtdPay gets a reference to the given Pay and assigns it to the YtdPay field.
func (o *EarningsTotal) SetYtdPay(v Pay) {
	o.YtdPay = &v
}

// GetCurrentHours returns the CurrentHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EarningsTotal) GetCurrentHours() string {
	if o == nil || o.CurrentHours.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrentHours.Get()
}

// GetCurrentHoursOk returns a tuple with the CurrentHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EarningsTotal) GetCurrentHoursOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrentHours.Get(), o.CurrentHours.IsSet()
}

// HasCurrentHours returns a boolean if a field has been set.
func (o *EarningsTotal) HasCurrentHours() bool {
	if o != nil && o.CurrentHours.IsSet() {
		return true
	}

	return false
}

// SetCurrentHours gets a reference to the given NullableString and assigns it to the CurrentHours field.
func (o *EarningsTotal) SetCurrentHours(v string) {
	o.CurrentHours.Set(&v)
}
// SetCurrentHoursNil sets the value for CurrentHours to be an explicit nil
func (o *EarningsTotal) SetCurrentHoursNil() {
	o.CurrentHours.Set(nil)
}

// UnsetCurrentHours ensures that no value is present for CurrentHours, not even an explicit nil
func (o *EarningsTotal) UnsetCurrentHours() {
	o.CurrentHours.Unset()
}

// GetCurrentRate returns the CurrentRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EarningsTotal) GetCurrentRate() string {
	if o == nil || o.CurrentRate.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrentRate.Get()
}

// GetCurrentRateOk returns a tuple with the CurrentRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EarningsTotal) GetCurrentRateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrentRate.Get(), o.CurrentRate.IsSet()
}

// HasCurrentRate returns a boolean if a field has been set.
func (o *EarningsTotal) HasCurrentRate() bool {
	if o != nil && o.CurrentRate.IsSet() {
		return true
	}

	return false
}

// SetCurrentRate gets a reference to the given NullableString and assigns it to the CurrentRate field.
func (o *EarningsTotal) SetCurrentRate(v string) {
	o.CurrentRate.Set(&v)
}
// SetCurrentRateNil sets the value for CurrentRate to be an explicit nil
func (o *EarningsTotal) SetCurrentRateNil() {
	o.CurrentRate.Set(nil)
}

// UnsetCurrentRate ensures that no value is present for CurrentRate, not even an explicit nil
func (o *EarningsTotal) UnsetCurrentRate() {
	o.CurrentRate.Unset()
}

func (o EarningsTotal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CanonicalDescription.IsSet() {
		toSerialize["canonical_description"] = o.CanonicalDescription.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.CurrentPay != nil {
		toSerialize["current_pay"] = o.CurrentPay
	}
	if o.YtdPay != nil {
		toSerialize["ytd_pay"] = o.YtdPay
	}
	if o.CurrentHours.IsSet() {
		toSerialize["current_hours"] = o.CurrentHours.Get()
	}
	if o.CurrentRate.IsSet() {
		toSerialize["current_rate"] = o.CurrentRate.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *EarningsTotal) UnmarshalJSON(bytes []byte) (err error) {
	varEarningsTotal := _EarningsTotal{}

	if err = json.Unmarshal(bytes, &varEarningsTotal); err == nil {
		*o = EarningsTotal(varEarningsTotal)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "canonical_description")
		delete(additionalProperties, "description")
		delete(additionalProperties, "current_pay")
		delete(additionalProperties, "ytd_pay")
		delete(additionalProperties, "current_hours")
		delete(additionalProperties, "current_rate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEarningsTotal struct {
	value *EarningsTotal
	isSet bool
}

func (v NullableEarningsTotal) Get() *EarningsTotal {
	return v.value
}

func (v *NullableEarningsTotal) Set(val *EarningsTotal) {
	v.value = val
	v.isSet = true
}

func (v NullableEarningsTotal) IsSet() bool {
	return v.isSet
}

func (v *NullableEarningsTotal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEarningsTotal(val *EarningsTotal) *NullableEarningsTotal {
	return &NullableEarningsTotal{value: val, isSet: true}
}

func (v NullableEarningsTotal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEarningsTotal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


