/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.31.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// PersonalFinanceCategory Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases. The field is currently in beta.  The complete category can be generated by concatenating primary and detailed categories.  This feature is currently in beta â€“ to request access, contact transactions-feedback@plaid.com.
type PersonalFinanceCategory struct {
	// A high level category that communicates the broad category of the transaction.
	Primary string `json:"primary"`
	// Provides additional granularity to the primary categorization.
	Detailed string `json:"detailed"`
	AdditionalProperties map[string]interface{}
}

type _PersonalFinanceCategory PersonalFinanceCategory

// NewPersonalFinanceCategory instantiates a new PersonalFinanceCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonalFinanceCategory(primary string, detailed string) *PersonalFinanceCategory {
	this := PersonalFinanceCategory{}
	this.Primary = primary
	this.Detailed = detailed
	return &this
}

// NewPersonalFinanceCategoryWithDefaults instantiates a new PersonalFinanceCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonalFinanceCategoryWithDefaults() *PersonalFinanceCategory {
	this := PersonalFinanceCategory{}
	return &this
}

// GetPrimary returns the Primary field value
func (o *PersonalFinanceCategory) GetPrimary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *PersonalFinanceCategory) GetPrimaryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *PersonalFinanceCategory) SetPrimary(v string) {
	o.Primary = v
}

// GetDetailed returns the Detailed field value
func (o *PersonalFinanceCategory) GetDetailed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detailed
}

// GetDetailedOk returns a tuple with the Detailed field value
// and a boolean to check if the value has been set.
func (o *PersonalFinanceCategory) GetDetailedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Detailed, true
}

// SetDetailed sets field value
func (o *PersonalFinanceCategory) SetDetailed(v string) {
	o.Detailed = v
}

func (o PersonalFinanceCategory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["primary"] = o.Primary
	}
	if true {
		toSerialize["detailed"] = o.Detailed
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PersonalFinanceCategory) UnmarshalJSON(bytes []byte) (err error) {
	varPersonalFinanceCategory := _PersonalFinanceCategory{}

	if err = json.Unmarshal(bytes, &varPersonalFinanceCategory); err == nil {
		*o = PersonalFinanceCategory(varPersonalFinanceCategory)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "primary")
		delete(additionalProperties, "detailed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePersonalFinanceCategory struct {
	value *PersonalFinanceCategory
	isSet bool
}

func (v NullablePersonalFinanceCategory) Get() *PersonalFinanceCategory {
	return v.value
}

func (v *NullablePersonalFinanceCategory) Set(val *PersonalFinanceCategory) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonalFinanceCategory) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonalFinanceCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonalFinanceCategory(val *PersonalFinanceCategory) *NullablePersonalFinanceCategory {
	return &NullablePersonalFinanceCategory{value: val, isSet: true}
}

func (v NullablePersonalFinanceCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonalFinanceCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


