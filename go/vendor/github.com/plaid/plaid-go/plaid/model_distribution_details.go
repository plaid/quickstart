/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.31.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// DistributionDetails An object representing information about a distribution from the paycheck (for example, the amount distributed to a specific checking account, or to a retirement plan).
type DistributionDetails struct {
	// The account number of the account being deposited to.
	AccountNumber NullableString `json:"account_number,omitempty"`
	// The type of bank account (e.g. Checking or Savings)
	BankAccountType NullableString `json:"bank_account_type,omitempty"`
	// The name of the bank that the payment is being deposited to.
	BankName NullableString `json:"bank_name,omitempty"`
	CurrentPay *Pay `json:"current_pay,omitempty"`
	// A description of the distribution type.
	Description NullableString `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DistributionDetails DistributionDetails

// NewDistributionDetails instantiates a new DistributionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDistributionDetails() *DistributionDetails {
	this := DistributionDetails{}
	return &this
}

// NewDistributionDetailsWithDefaults instantiates a new DistributionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDistributionDetailsWithDefaults() *DistributionDetails {
	this := DistributionDetails{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DistributionDetails) GetAccountNumber() string {
	if o == nil || o.AccountNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccountNumber.Get()
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DistributionDetails) GetAccountNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountNumber.Get(), o.AccountNumber.IsSet()
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *DistributionDetails) HasAccountNumber() bool {
	if o != nil && o.AccountNumber.IsSet() {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given NullableString and assigns it to the AccountNumber field.
func (o *DistributionDetails) SetAccountNumber(v string) {
	o.AccountNumber.Set(&v)
}
// SetAccountNumberNil sets the value for AccountNumber to be an explicit nil
func (o *DistributionDetails) SetAccountNumberNil() {
	o.AccountNumber.Set(nil)
}

// UnsetAccountNumber ensures that no value is present for AccountNumber, not even an explicit nil
func (o *DistributionDetails) UnsetAccountNumber() {
	o.AccountNumber.Unset()
}

// GetBankAccountType returns the BankAccountType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DistributionDetails) GetBankAccountType() string {
	if o == nil || o.BankAccountType.Get() == nil {
		var ret string
		return ret
	}
	return *o.BankAccountType.Get()
}

// GetBankAccountTypeOk returns a tuple with the BankAccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DistributionDetails) GetBankAccountTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BankAccountType.Get(), o.BankAccountType.IsSet()
}

// HasBankAccountType returns a boolean if a field has been set.
func (o *DistributionDetails) HasBankAccountType() bool {
	if o != nil && o.BankAccountType.IsSet() {
		return true
	}

	return false
}

// SetBankAccountType gets a reference to the given NullableString and assigns it to the BankAccountType field.
func (o *DistributionDetails) SetBankAccountType(v string) {
	o.BankAccountType.Set(&v)
}
// SetBankAccountTypeNil sets the value for BankAccountType to be an explicit nil
func (o *DistributionDetails) SetBankAccountTypeNil() {
	o.BankAccountType.Set(nil)
}

// UnsetBankAccountType ensures that no value is present for BankAccountType, not even an explicit nil
func (o *DistributionDetails) UnsetBankAccountType() {
	o.BankAccountType.Unset()
}

// GetBankName returns the BankName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DistributionDetails) GetBankName() string {
	if o == nil || o.BankName.Get() == nil {
		var ret string
		return ret
	}
	return *o.BankName.Get()
}

// GetBankNameOk returns a tuple with the BankName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DistributionDetails) GetBankNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BankName.Get(), o.BankName.IsSet()
}

// HasBankName returns a boolean if a field has been set.
func (o *DistributionDetails) HasBankName() bool {
	if o != nil && o.BankName.IsSet() {
		return true
	}

	return false
}

// SetBankName gets a reference to the given NullableString and assigns it to the BankName field.
func (o *DistributionDetails) SetBankName(v string) {
	o.BankName.Set(&v)
}
// SetBankNameNil sets the value for BankName to be an explicit nil
func (o *DistributionDetails) SetBankNameNil() {
	o.BankName.Set(nil)
}

// UnsetBankName ensures that no value is present for BankName, not even an explicit nil
func (o *DistributionDetails) UnsetBankName() {
	o.BankName.Unset()
}

// GetCurrentPay returns the CurrentPay field value if set, zero value otherwise.
func (o *DistributionDetails) GetCurrentPay() Pay {
	if o == nil || o.CurrentPay == nil {
		var ret Pay
		return ret
	}
	return *o.CurrentPay
}

// GetCurrentPayOk returns a tuple with the CurrentPay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistributionDetails) GetCurrentPayOk() (*Pay, bool) {
	if o == nil || o.CurrentPay == nil {
		return nil, false
	}
	return o.CurrentPay, true
}

// HasCurrentPay returns a boolean if a field has been set.
func (o *DistributionDetails) HasCurrentPay() bool {
	if o != nil && o.CurrentPay != nil {
		return true
	}

	return false
}

// SetCurrentPay gets a reference to the given Pay and assigns it to the CurrentPay field.
func (o *DistributionDetails) SetCurrentPay(v Pay) {
	o.CurrentPay = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DistributionDetails) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DistributionDetails) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DistributionDetails) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *DistributionDetails) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DistributionDetails) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DistributionDetails) UnsetDescription() {
	o.Description.Unset()
}

func (o DistributionDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountNumber.IsSet() {
		toSerialize["account_number"] = o.AccountNumber.Get()
	}
	if o.BankAccountType.IsSet() {
		toSerialize["bank_account_type"] = o.BankAccountType.Get()
	}
	if o.BankName.IsSet() {
		toSerialize["bank_name"] = o.BankName.Get()
	}
	if o.CurrentPay != nil {
		toSerialize["current_pay"] = o.CurrentPay
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DistributionDetails) UnmarshalJSON(bytes []byte) (err error) {
	varDistributionDetails := _DistributionDetails{}

	if err = json.Unmarshal(bytes, &varDistributionDetails); err == nil {
		*o = DistributionDetails(varDistributionDetails)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account_number")
		delete(additionalProperties, "bank_account_type")
		delete(additionalProperties, "bank_name")
		delete(additionalProperties, "current_pay")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDistributionDetails struct {
	value *DistributionDetails
	isSet bool
}

func (v NullableDistributionDetails) Get() *DistributionDetails {
	return v.value
}

func (v *NullableDistributionDetails) Set(val *DistributionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDistributionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDistributionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistributionDetails(val *DistributionDetails) *NullableDistributionDetails {
	return &NullableDistributionDetails{value: val, isSet: true}
}

func (v NullableDistributionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistributionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


